1. Что такое параллельное соединение? Особенности параллельного соединения.

Параллельное соединение позволяет серверу обрабатывать запросы от нескольких клиентов одновременно, создавая отдельные потоки или процессы для каждого запроса. Особенностью параллельного соединения является то, что оно позволяет избежать задержек, связанных с обработкой одного клиента, и обеспечивает лучшее время отклика для всех клиентов, подключённых к серверу​.

2. В чём заключается отличие параллельного соединения от последовательного?

При последовательном соединении сервер обрабатывает запросы клиентов один за другим, что может привести к задержкам, если один из клиентов отправляет большой объем данных. Параллельное соединение, наоборот, позволяет серверу обрабатывать запросы от нескольких клиентов одновременно, создавая для каждого клиента отдельный поток или процесс. Это позволяет избежать длительных задержек и улучшает общее время отклика сервера​.

3. Назовите преимущества многопотоковых процессов по сравнению с однопотоковыми процессами.

Преимущества многопотоковых процессов включают:
- Улучшенная реакция приложения: многопоточные приложения могут выполнять несколько действий одновременно.
- Более эффективное использование мультипроцессорных систем: параллельные задачи могут выполняться быстрее.
- Улучшенная структура программы: многопоточные приложения проще адаптировать к изменениям требований.
-Эффективное использование ресурсов системы: многопотоковые приложения используют общую память и требуют меньше ресурсов по сравнению с процессами​.

4. С чем связано повышение эффективности многопотоковых процессов?

Повышение эффективности многопотоковых процессов связано с уменьшением издержек на переключение контекста. Так как потоки в одном и том же процессе разделяют значительную часть информации о состоянии процесса, операционной системе требуется меньше ресурсов для сохранения и восстановления состояния при переключении между потоками одного процесса​.

5. Назовите недостатки многопотокового процесса по сравнению с однопотоковым.

Недостатки многопотокового процесса включают:
- Риск непредсказуемого поведения из-за общей памяти и состояния процесса.
- Отсутствие надёжности: ошибка в одном потоке может привести к завершению всего процесса.
- Потоки могут помешать друг другу, если одновременно обращаются к одним и тем же данным без должной синхронизации​.

6. Какие функции служат для создания потоков?

Для создания потоков в Windows используется функция CreateThread(). Она создает новый поток, который выполняется в пределах адресного пространства вызвавшего процесса. Прототип функции:

HANDLE CreateThread(
    LPSECURITY_ATTRIBUTES lpThreadAttributes, // указатель на атрибуты безопасности
    DWORD dwStackSize,                        // размер стека начального потока
    LPTHREAD_START_ROUTINE lpStartAddress,    // указатель на функцию потока
    LPVOID lpParameter,                       // аргумент для нового потока
    DWORD dwCreationFlags,                    // флаги создания
    LPDWORD lpThreadId                        // указатель на идентификатор потока
);

Основные параметры:
- lpThreadAttributes — определяет атрибуты безопасности для нового потока.
- dwStackSize — начальный размер стека потока.
- lpStartAddress — указатель на функцию, которая будет выполнена потоком.
- lpParameter — аргумент, передаваемый в поток.
- dwCreationFlags — флаги, управляющие созданием потока (например, CREATE_SUSPENDED).
- lpThreadId — возвращает идентификатор потока.

Если функция выполняется успешно, она возвращает дескриптор нового потока; в противном случае — NULL​(Komlichenko_komp_removed).